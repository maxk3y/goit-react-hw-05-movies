{"version":3,"file":"static/js/233.9eb3ef6e.chunk.js","mappings":"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","sources":["components/SearchMovie/SearchMovie.styled.js","components/SearchMovie/SearchMovie.jsx","pages/Movies.jsx","services/fetchMovies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const SearchbarWrapper = styled.section`\n  top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 2;\n  display: flex;\n  align-items: center;\n  width: 100vw;\n  min-height: 50px;\n  padding: 12px 24px;\n  padding-left: 40px;\n  background-color: #5e8cff;\n  box-shadow: gray;\n`;\n\nexport const SearchForm = styled.form`\n  display: flex;\n  width: 100%;\n  max-width: 600px;\n  background-color: orange;\n  border-radius: 4x;\n  overflow: hidden;\n`;\n\nexport const SearchButton = styled.button`\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n  border: 1px solid rgb(190, 190, 190);\n  background-size: 50%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.5px;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1px;\n  }\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 24px;\n  border: none;\n  outline: none;\n  padding: 10px;\n  &::placeholder {\n    font-style: inherit;\n    font-size: 20px;\n  }\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Notiflix from 'notiflix';\nimport {\n  SearchbarWrapper,\n  SearchForm,\n  SearchButton,\n  SearchFormInput,\n} from './SearchMovie.styled';\n\nexport function SearchMovie({ onSubmit }) {\n  const [query, setQuery] = useState('');\n\n  const handleChangeInput = evt => {\n    setQuery(evt.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmitForm = evt => {\n    evt.preventDefault();\n    if (query.trim() === '' || query.length < 2) {\n      Notiflix.Notify.info('Searching must be no empty and more than 1 letter');\n      resetForm();\n      return;\n    }\n    onSubmit(query);\n    resetForm();\n  };\n\n  const resetForm = () => setQuery('');\n\n  return (\n    <SearchbarWrapper>\n      <SearchForm onSubmit={handleSubmitForm}>\n        <SearchFormInput\n          type=\"text\"\n          autocomplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies...\"\n          value={query}\n          onChange={handleChangeInput}\n        />\n        <SearchButton type=\"submit\"></SearchButton>\n      </SearchForm>\n    </SearchbarWrapper>\n  );\n}\n\nSearchMovie.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","import { useState, useEffect, lazy, Suspense } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { API } from '../services/fetchMovies';\nimport { Loader } from '../services/loader';\nimport { SearchMovie } from 'components/SearchMovie/SearchMovie';\nimport Notiflix from 'notiflix';\n\nconst MovieList = lazy(() => import('../components/MovieList/MovieList.jsx'));\n\nconst Movies = () => {\n  const [query, setQuery] = useState(null);\n  const [movies, setMovies] = useState(\n    JSON.parse(localStorage.getItem('movies')) || null\n  );\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (!movieName) return;\n\n    API.fetchMovieSearch(movieName)\n      .then(res => {\n        setMovies(res);\n        localStorage.setItem('movies', JSON.stringify(res));\n      })\n      .catch(() =>\n        Notiflix.Notify.failure('Sorry, there are not details of this movie')\n      );\n  }, [movieName]);\n\n  const onSubmitForm = search => {\n    if (search !== query) {\n      setQuery(search);\n      setSearchParams({ query: search });\n    } else {\n      Notiflix.Notify.failure(\n        'The new search must be different from the current search'\n      );\n    }\n  };\n\n  return (\n    <>\n      <SearchMovie value={movieName} onSubmit={onSubmitForm} />\n      <Suspense fallback={<Loader />}>\n        {movies && <MovieList movies={movies} />}\n      </Suspense>\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = '56c9cff34398937cd3a30d65e68fe36d';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst TRENDS = 'trending/movie/day';\n\nasync function fetchMovieTrends() {\n  const {\n    data: { results, total_results },\n    status,\n  } = await axios.get(`${BASE_URL}${TRENDS}?api_key=${API_KEY}`);\n  if (status !== 200 || total_results === 0) {\n    throw new Error();\n  } else return Object.values(results);\n}\n\nasync function fetchMovieById(IdMovie) {\n  const { data, status } = await axios.get(\n    `${BASE_URL}movie/${IdMovie}?api_key=${API_KEY}`\n  );\n\n  if (status !== 200 || !data) {\n    throw new Error();\n  } else return data;\n}\n\nasync function fetchCreditsById(IdMovie) {\n  const { data, status } = await axios.get(\n    `${BASE_URL}movie/${IdMovie}/credits?api_key=${API_KEY}`\n  );\n\n  if (status !== 200 || !data) {\n    throw new Error();\n  } else return data;\n}\n\nasync function fetchReviewsById(IdMovie) {\n  const { data, status } = await axios.get(\n    `${BASE_URL}movie/${IdMovie}/reviews?api_key=${API_KEY}`\n  );\n\n  if (status !== 200 || !data) {\n    throw new Error();\n  } else return data;\n}\n\nasync function fetchMovieSearch(query = '', page = 1) {\n  const {\n    data: { results, total_results },\n    status,\n  } = await axios.get(\n    `${BASE_URL}search/movie?query=${query}&page=${page}&api_key=${API_KEY}&language=en-US&include_adult=false`\n  );\n  if (status !== 200 || total_results === 0) {\n    throw new Error();\n  } else return results;\n}\n\nexport const API = {\n  fetchMovieTrends,\n  fetchMovieSearch,\n  fetchMovieById,\n  fetchCreditsById,\n  fetchReviewsById,\n};\n"],"names":["SearchbarWrapper","styled","SearchForm","SearchButton","SearchFormInput","SearchMovie","onSubmit","useState","query","setQuery","resetForm","evt","preventDefault","trim","length","Notiflix","type","autocomplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","MovieList","lazy","JSON","parse","localStorage","getItem","movies","setMovies","useSearchParams","searchParams","setSearchParams","movieName","get","useEffect","API","then","res","setItem","stringify","catch","search","Suspense","fallback","API_KEY","BASE_URL","TRENDS","fetchMovieTrends","axios","data","results","total_results","status","Error","Object","values","fetchMovieById","IdMovie","fetchCreditsById","fetchReviewsById","fetchMovieSearch","page"],"sourceRoot":""}